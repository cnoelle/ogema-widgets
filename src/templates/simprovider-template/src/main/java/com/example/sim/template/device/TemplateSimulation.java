/**
 * This file is part of the OGEMA widgets framework.
 *
 * OGEMA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * as published by the Free Software Foundation.
 *
 * OGEMA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OGEMA. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2014 - 2016
 *
 * Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IWES/Fraunhofer IEE
 */

package com.example.sim.template.device;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ogema.core.application.ApplicationManager;
import org.ogema.core.application.Timer;
import org.ogema.core.model.Resource;
import org.ogema.core.resourcemanager.ResourceAlreadyExistsException;
import org.ogema.model.devices.generators.PVPlant;
import org.ogema.tools.simulation.service.api.model.SimulatedQuantity;
import org.ogema.tools.simulation.service.api.model.SimulationConfiguration;
import org.ogema.tools.simulation.service.apiplus.SimulationBase;
import org.ogema.tools.simulation.service.apiplus.SimulationPatternStd;

import com.example.sim.template.logic.SimulatedPV;

import de.iwes.util.resource.ValueResourceHelper;

/**
 * A simulation provider, that simulates e.g. a particular sort of devices. 
 * In this example, a the power generated by a PV plant is simulated.  
 */
public class TemplateSimulation extends SimulationBase<SimulationPatternStd, TemplatePattern> {
	
	private static final long PV_UPDATE_INTERVAL = 4000;

	// callbacks are guaranteed to come in the same thread, no need to synchronize on the map
	private final Map<String,SimulatedPV> simulatedObjects = new HashMap<>();
	
	public TemplateSimulation(ApplicationManager am) {
		super(am, TemplatePattern.class, true, SimulationPatternStd.class);
	}	

	@Override
	public String getProviderId() {
		return "Template simulation";
	}
	
	@Override
	public Class<? extends Resource> getSimulatedType() {
		return PVPlant.class;
	}

	@Override
	public void buildConfigurations(TemplatePattern pattern, List<SimulationConfiguration> cfgs, SimulationPatternStd simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		RatedPowerConfig ratpow = new RatedPowerConfig(pattern.maxPower);
		cfgs.add(ratpow);
	}
	
	@Override
	public void buildQuantities(TemplatePattern pattern, List<SimulatedQuantity> quantities, SimulationPatternStd simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		GeneratedPowerValue powerValue = new GeneratedPowerValue(pattern);
		quantities.add(powerValue);
	}
	
	@Override
	public String getDescription() {
		return "Simulated template device";
	}
	
	/** 
	 * Perform the actual simulation here. The targetPattern points to the simulated resource (typically a device). 
	 * The configPattern points to the simulation configuration resource indicating the 
	 * simulation time interval etc.
	 * @param timeStep time since last simulation step in milliseconds
	 */
	@Override
	public void simTimerElapsed(TemplatePattern targetPattern, SimulationPatternStd configPattern, Timer t, long timeStep) {
		SimulatedPV logic = simulatedObjects.get(targetPattern.model.getLocation());
		logic.updateState(timeStep);
	}

	
	@Override
	protected void initSimulation(TemplatePattern targetPattern, SimulationPatternStd configPattern) {
		// initialize and activate also the optional fields in targetPattern
		if(ValueResourceHelper.setIfNew(targetPattern.maxPower, 5000) | ValueResourceHelper.setIfNew(targetPattern.powerReading, 0.0f)) {
			resourcePatternAccess.activatePattern(targetPattern);
		}

		SimulatedPV logic = new SimulatedPV(appManager, targetPattern);
		simulatedObjects.put(targetPattern.model.getLocation(), logic);
	}
	
	@Override
	protected void removeSimulation(TemplatePattern targetPattern, SimulationPatternStd configPattern) {
		if (targetPattern != null && targetPattern.model != null) {
			SimulatedPV logic = simulatedObjects.remove(targetPattern.model.getLocation());
			logic.close();
		}
	}
}
