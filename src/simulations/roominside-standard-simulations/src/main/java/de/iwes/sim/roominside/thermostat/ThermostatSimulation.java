/**
 * ﻿Copyright 2014-2018 Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copyright 2009 - 2016
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IWES
 *
 * All Rights reserved
 */
/**
 * Copyright 2009 - 2014
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IIS Fraunhofer ISE Fraunhofer IWES
 *
 * All Rights reserved
 */
package de.iwes.sim.roominside.thermostat;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ogema.apps.roomsim.service.api.RoomSimulationService;
import org.ogema.apps.roomsim.service.api.helpers.RoomConnection;
import org.ogema.apps.roomsim.service.api.helpers.RoomInsideLogicBase;
import org.ogema.apps.roomsim.service.api.helpers.RoomInsideSimBase;
import org.ogema.core.application.ApplicationManager;
import org.ogema.core.application.Timer;
import org.ogema.core.model.Resource;
import org.ogema.core.resourcemanager.ResourceAlreadyExistsException;
import org.ogema.model.devices.buildingtechnology.Thermostat;
import org.ogema.model.prototypes.PhysicalElement;
import org.ogema.tools.simulation.service.api.model.SimulatedQuantity;
import org.ogema.tools.simulation.service.api.model.SimulationConfiguration;

import de.iwes.sim.roominside.thermostat.logic.BatterySetpoint;
import de.iwes.sim.roominside.thermostat.logic.HeatFlow;
import de.iwes.sim.roominside.thermostat.logic.InitState;
import de.iwes.sim.roominside.thermostat.logic.SimulatedThermostat;
import de.iwes.sim.roominside.thermostat.logic.StandardFlavorConfig;
import de.iwes.sim.roominside.thermostat.logic.TemperatureSetpoint;
import de.iwes.sim.roominside.thermostat.logic.ValvePosition;
import de.iwes.util.format.NameFinder;
import de.iwes.util.resource.ValueResourceHelper;

/**
 * A simulation provider, that simulates e.g. a particular sort of devices. 
 * In this example, a the power generated by a PV plant is simulated.  
 */

public class ThermostatSimulation extends RoomInsideSimBase<ThermostatConfigPattern, ThermostatPattern> {
	
	private static final long SIM_UPDATE_INTERVAL = 4000;
	@Override
	protected long getDefaultUpdateInterval(){return SIM_UPDATE_INTERVAL;}
	
	public static ThermostatConfigPattern globalConfig = null;

	// callbacks are guaranteed to come in the same thread, no need to synchronize on the map
	private final Map<String,SimulatedThermostat> simulatedObjects = new HashMap<>();
	private final RoomSimulationService roomSimService;
	
	public ThermostatSimulation(ApplicationManager am, RoomSimulationService roomSimService) {
		super(am, ThermostatPattern.class, false, ThermostatConfigPattern.class);
		this.roomSimService = roomSimService;
	}	

	@Override
	public String getProviderId() {
		return "Thermostat simulation _Room Simulation_";
	}
	
	@Override
	public Class<? extends Resource> getSimulatedType() {
		return Thermostat.class;
	}
	
	@Override
	public void patternAvailable(ThermostatConfigPattern pattern) {
		if (pattern.isGlobalConfig.isActive()) {
			if (globalConfig != null) {
				if (globalConfig.model.equalsLocation(pattern.model)) {
					//nothing to do
				} else {
					//we have two global configs
					logger.error("Two global Thermostat Simulation configurations found:"+globalConfig.model.getLocation()+" and "+pattern.model.getLocation());
				}
			} else {
				globalConfig = pattern;
			}
		}
		super.patternAvailable(pattern);
	}
	
	@Override
	public Resource createSimulatedObject(String deviceLocation) {
		// XXX
		ThermostatPattern pattern = getAnyTargetPatternIfEmpty(deviceLocation);
		if (pattern == null) {
			try {
				if (deviceLocation.indexOf('/') > 0) {
					final int i = deviceLocation.lastIndexOf('/');
					Resource parent = appManager.getResourceAccess().getResource(deviceLocation.substring(0, i));
					if (parent == null || !parent.exists()) 
						throw new IllegalArgumentException("Specified parent resource " +deviceLocation.substring(0, i) + " does not exist");
					pattern = resourcePatternAccess.addDecorator(parent, deviceLocation.substring(i+1), targetPatternClass);
				}
				else {
					pattern = resourcePatternAccess.createResource(deviceLocation, targetPatternClass);
				}
				if(pattern.model instanceof PhysicalElement) {
					PhysicalElement modelPh = (PhysicalElement)(pattern.model);
					modelPh.name().create();
					modelPh.name().setValue(NameFinder.convertCamelToHumanReadble(deviceLocation));
				}
				logger.info("New "+targetPatternClass.getSimpleName()+" created "+ pattern.model.getLocation());
				// this activates the pattern and its configuration resource
			} catch (ResourceAlreadyExistsException e) {
				logger.warn("Could not create new simulated object " + deviceLocation, e);
				return null;
			}
		}
		ThermostatConfig simConfig = (ThermostatConfig) addConfigResource(pattern, getDefaultUpdateInterval());
		if((globalConfig != null)&&(globalConfig.standardFlavorConfiguration.isActive())) {
			simConfig.flavorConfiguration().create();
			simConfig.flavorConfiguration().setValue(globalConfig.standardFlavorConfiguration.getValue());
			simConfig.flavorConfiguration().activate(false);
		}
		return pattern.model;
	}
	
	@Override
	public void buildConfigurations(ThermostatPattern pattern, List<SimulationConfiguration> cfgs, ThermostatConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		cfgs.add(new RoomConnection<>(simPattern.roomSimulationToConnect, appManager.getResourceAccess(),
				roomSimService, this, simPattern));
		if(pattern.setpointFB.isActive()) {
			cfgs.add(new TemperatureSetpoint(pattern.setpointFB));
		} else {
			cfgs.add(new TemperatureSetpoint(pattern.targetTemperature));
		}
		if(pattern.batteryCharge.isActive() || pattern.batteryState != null) {
			cfgs.add(new BatterySetpoint(pattern.batteryCharge, pattern.batteryState));
		}
		cfgs.add(new InitState(simPattern.initState));
		cfgs.add(new StandardFlavorConfig(simPattern));
	}
	
	@Override
	public void buildQuantities(ThermostatPattern pattern, List<SimulatedQuantity> quantities, ThermostatConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		HeatFlow hflow= new HeatFlow(pattern.thPower);
		quantities.add(hflow);
		ValvePosition vp = new ValvePosition(pattern.valveStatus);
		quantities.add(vp);
	}
	
	@Override
	public String getDescription() {
		return "Simulated radiator with thermostat, valve connected into room via Room Simulation Service."
				+ " Note that after creation of a simulated object the room connector has to be set before"
				+ "the simulation can be activated.";
	}
	
	@Override
	public void simTimerElapsed(ThermostatPattern targetPattern, ThermostatConfigPattern configPattern, Timer t, long timeStep) {
		//here the timing is provided by the room simulations service directly to the component
	}

	
	@SuppressWarnings("unchecked")
	@Override
	protected void initSimulation(ThermostatPattern targetPattern, ThermostatConfigPattern configPattern) {
		SimulatedThermostat logic = new SimulatedThermostat(appManager, targetPattern, configPattern,
				roomSimService, this);
		simulatedObjects.put(targetPattern.model.getLocation(), logic);
		// initialize and activate also the optional fields in targetPattern
		boolean finalActivate = false;
		if(ValueResourceHelper.setIfNew(targetPattern.thPower, 0.0f) | ValueResourceHelper.setIfNew(targetPattern.valveStatus, 0.5f) |
				ValueResourceHelper.setIfNew(targetPattern.valveStateControl, 0.5f) |
				ValueResourceHelper.setIfNewCelsius(targetPattern.targetTemperature, 21.0f)) {
			finalActivate = true;
		}
		//next look for flavors
		if(configPattern.flavorConfiguration.isActive() && configPattern.flavorConfiguration.getValue().equals("HomematicV1")) {
			if(ValueResourceHelper.setIfNew(targetPattern.batteryCharge, 0.95f) |
					ValueResourceHelper.setIfNew(targetPattern.setpointFB, targetPattern.targetTemperature.getValue())) {
				finalActivate = true;
			}
		}
		//next look for initStates
		if(!(configPattern.initState.isActive() && configPattern.initState.getValue() == 0)) {
			if(ValueResourceHelper.setIfNewCelsius(targetPattern.measuredTemperature, 20.5f)) {
				finalActivate = true;
			}
		}
		if(finalActivate) {
			targetPattern.model.activate(true);
		}

	}
	
	@Override
	protected void removeSimulation(ThermostatPattern targetPattern, ThermostatConfigPattern configPattern) {
		SimulatedThermostat logic = simulatedObjects.remove(targetPattern.model.getLocation());
		if (logic != null)
			logic.close();
	}

	@Override
	protected RoomInsideLogicBase<?> getSimulatedObjects(String simLocation) {
		return simulatedObjects.get(simLocation);
	}
}
