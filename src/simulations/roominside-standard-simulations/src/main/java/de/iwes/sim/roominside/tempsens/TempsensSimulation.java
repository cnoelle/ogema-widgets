/**
 * ﻿Copyright 2014-2018 Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copyright 2009 - 2016
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IWES
 *
 * All Rights reserved
 */
/**
 * Copyright 2009 - 2014
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IIS Fraunhofer ISE Fraunhofer IWES
 *
 * All Rights reserved
 */
package de.iwes.sim.roominside.tempsens;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ogema.apps.roomsim.service.api.RoomSimulationService;
import org.ogema.apps.roomsim.service.api.helpers.RoomConnection;
import org.ogema.apps.roomsim.service.api.helpers.RoomInsideLogicBase;
import org.ogema.apps.roomsim.service.api.helpers.RoomInsideSimBase;
import org.ogema.core.application.ApplicationManager;
import org.ogema.core.application.Timer;
import org.ogema.core.model.Resource;
import org.ogema.model.sensors.TemperatureSensor;
import org.ogema.tools.simulation.service.api.model.SimulatedQuantity;
import org.ogema.tools.simulation.service.api.model.SimulationConfiguration;

import de.iwes.sim.roominside.tempsens.logic.SimulatedTempsens;
import de.iwes.sim.roominside.tempsens.logic.Temperature;
import de.iwes.util.resource.ValueResourceHelper;

/**
 * A simulation provider, that simulates e.g. a particular sort of devices. 
 * In this example, a the power generated by a PV plant is simulated.  
 */
public class TempsensSimulation extends RoomInsideSimBase<TempsensConfigPattern, TempsensPattern> {
	
	private static final long SIM_UPDATE_INTERVAL = 4000;
	@Override
	protected long getDefaultUpdateInterval(){return SIM_UPDATE_INTERVAL;}

	// callbacks are guaranteed to come in the same thread, no need to synchronize on the map
	private final Map<String,SimulatedTempsens> simulatedObjects = new HashMap<>();
	private final RoomSimulationService roomSimService;
	
	public TempsensSimulation(ApplicationManager am, RoomSimulationService roomSimService) {
		super(am, TempsensPattern.class, false, TempsensConfigPattern.class);
		this.roomSimService = roomSimService;
	}	

	@Override
	public String getProviderId() {
		return "Temperature sensor simulation _Room Simulation_";
	}
	
	@Override
	public Class<? extends Resource> getSimulatedType() {
		return TemperatureSensor.class;
	}
	
	@Override
	public void buildConfigurations(TempsensPattern pattern, List<SimulationConfiguration> cfgs, TempsensConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		cfgs.add(new RoomConnection<>(simPattern.roomSimulationToConnect, appManager.getResourceAccess(),
				roomSimService, this, simPattern));
	}
	
	@Override
	public void buildQuantities(TempsensPattern pattern, List<SimulatedQuantity> quantities, TempsensConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		Temperature temp = new Temperature(pattern.reading);
		quantities.add(temp);
	}
	
	@Override
	public String getDescription() {
		return "Simulated temperature sensor connected into room via Room Simulation Service."
				+ " Note that after creation of a simulated object the room connector has to be set before"
				+ "the simulation can be activated.";
	}
	
	@Override
	public void simTimerElapsed(TempsensPattern targetPattern, TempsensConfigPattern configPattern, Timer t, long timeStep) {
		//here the timing is provided by the room simulations service directly to the component
	}

	
	@SuppressWarnings("unchecked")
	@Override
	protected void initSimulation(TempsensPattern targetPattern, TempsensConfigPattern configPattern) {
		SimulatedTempsens logic = new SimulatedTempsens(appManager, targetPattern, configPattern,
				roomSimService, this);
		simulatedObjects.put(targetPattern.model.getLocation(), logic);
		// initialize and activate also the optional fields in targetPattern
		if(ValueResourceHelper.setIfNew(targetPattern.reading, 0.0f) ) {
			targetPattern.model.activate(true);
		}
	}
	
	@Override
	protected void removeSimulation(TempsensPattern targetPattern, TempsensConfigPattern configPattern) {
		SimulatedTempsens logic = simulatedObjects.remove(targetPattern.model.getLocation());
		logic.close();
	}

	@Override
	protected RoomInsideLogicBase<?> getSimulatedObjects(String simLocation) {
		return simulatedObjects.get(simLocation);
	}
}
