/**
 * ﻿Copyright 2014-2018 Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copyright 2009 - 2016
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IWES
 *
 * All Rights reserved
 */
/**
 * Copyright 2009 - 2014
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IIS Fraunhofer ISE Fraunhofer IWES
 *
 * All Rights reserved
 */
package de.iwes.sim.roominside.person;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.ogema.apps.roomsim.service.api.RoomSimulationService;
import org.ogema.core.application.ApplicationManager;
import org.ogema.core.application.Timer;
import org.ogema.core.model.Resource;
import org.ogema.core.resourcemanager.ResourceAlreadyExistsException;
import org.ogema.model.locations.Room;
import org.ogema.model.user.NaturalPerson;
import org.ogema.tools.simulation.service.api.model.SimulatedQuantity;
import org.ogema.tools.simulation.service.api.model.SimulationConfiguration;
import org.ogema.tools.simulation.service.apiplus.SimulationBase;

import de.iwes.roominside.person.logic.AverageTimeInRoom;
import de.iwes.roominside.person.logic.User2Room;
import de.iwes.roominside.person.logic.UserProgramChoice;
import de.iwes.util.resource.ValueResourceHelper;

/**
 * A simulation provider, that simulates e.g. a particular sort of devices. 
 * In this example, a the power generated by a PV plant is simulated.  
 */
public class UserSimulation extends SimulationBase<UserSimConfigPattern, UserSimPattern> {
	
	private static final long PV_UPDATE_INTERVAL = 4000;
	private static final long AVERAGE_TIME_IN_ROOM_STD = 60000*30;

	// callbacks are guaranteed to come in the same thread, no need to synchronize on the map
	private final Map<String,SimulatedUser> simulatedObjects = new HashMap<>();
	private final RoomSimulationService roomSimService;
	private final Map<String, SimulatedPersonsInRoom> simulatedRooms = new HashMap<>();
	private final Map<String, Set<NaturalPerson>> addRequests = new HashMap<>();
	
	public UserSimulation(ApplicationManager am, RoomSimulationService roomSimService) {
		super(am, UserSimPattern.class, true, UserSimConfigPattern.class);
		this.roomSimService = roomSimService;
	}
	
	@SuppressWarnings("unchecked")
	private void checkForNewRoomSimulations() {
		List<Room> simList = roomSimService.getAvailableRooms();
		for(Room r: simList) {
			if(!simulatedRooms.containsKey(r.getLocation())) {
				SimulatedPersonsInRoom sim = new SimulatedPersonsInRoom(appManager, r,
						roomSimService, this, addRequests.get(r.getLocation()));
				simulatedRooms.put(r.getLocation(), sim);
				updateAllUserProbabilities();
			}
		}
	}
	public SimulatedPersonsInRoom getRoomConnector(String location) {
		SimulatedPersonsInRoom i = simulatedRooms.get(location);
		if(i != null) return i;
		checkForNewRoomSimulations();
		return simulatedRooms.get(location);
	}
	private void updateAllUserProbabilities() {
		for( Entry<String, SimulatedUser> userData: simulatedObjects.entrySet()) {
			userData.getValue().reCalculateProbility();
		}
	}
	
	@Override
	public String getProviderId() {
		return "User simulation";
	}
	
	@Override
	public Class<? extends Resource> getSimulatedType() {
		return NaturalPerson.class;
	}

	/** 
	 * createSimulatedObject is called by the simulation framework when a new resource is created via the
	 * simulation GUI or a similar mechanism and the resource shall be simulated by this provider.
	 */
	@Override
	public NaturalPerson createSimulatedObject(String deviceId) {
		UserSimPattern pattern = getAnyTargetPatternIfEmpty(deviceId);		
		if (pattern == null) {
			try {
				if (deviceId.indexOf('/') > 0) {
					final int i = deviceId.lastIndexOf('/');
					Resource parent = appManager.getResourceAccess().getResource(deviceId.substring(0, i));
					if (parent == null || !parent.exists()) 
						throw new IllegalArgumentException("Specified parent resource " +deviceId.substring(0, i) + " does not exist");
					pattern = resourcePatternAccess.addDecorator(parent, deviceId.substring(i+1), UserSimPattern.class);
				}
				else {
					pattern = resourcePatternAccess.createResource(deviceId, UserSimPattern.class);
				}
				pattern.model.name().create();
				pattern.model.name().setValue("Simulated User" + (simulatedDevices.isEmpty() ? "" : " " + simulatedDevices.size()));
				logger.info("New User-Resource created "+  pattern.model.name().getValue());
				// this activates the pattern and its configuration resource
				super.addConfigResource(pattern, PV_UPDATE_INTERVAL);
			} catch (ResourceAlreadyExistsException e) {
				logger.warn("Could not create new simulated object " + deviceId, e);
				return null;
			}
		} else {
			patternAvailable(getSimPattern(deviceId));
		}
		return pattern.model;
	}
	
	@Override
	public void buildConfigurations(UserSimPattern pattern, List<SimulationConfiguration> cfgs, UserSimConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		cfgs.add(new AverageTimeInRoom(simPattern.averageTimeInRoom, simulatedObjects, simPattern));
		cfgs.add(new User2Room(simPattern.currentPosition, simulatedObjects, simPattern));
		cfgs.add(new UserProgramChoice(simPattern.currentProgram, simulatedObjects, simPattern));
	}
	
	@Override
	public void buildQuantities(UserSimPattern pattern, List<SimulatedQuantity> quantities, UserSimConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
	}
	
	@Override
	public String getDescription() {
		return "Simulated user moving in building into rooms";
	}
	
	@Override
	public void simTimerElapsed(UserSimPattern targetPattern, UserSimConfigPattern configPattern, Timer t, long timeStep) {
		SimulatedUser logic = simulatedObjects.get(targetPattern.model.getLocation());
		logic.step(timeStep);
	}

	
	@SuppressWarnings("unchecked")
	@Override
	protected void initSimulation(UserSimPattern targetPattern, UserSimConfigPattern configPattern) {
		// initialize and activate also the optional fields in targetPattern
		boolean finalActivate = false;
		if(ValueResourceHelper.setIfNew(configPattern.averageTimeInRoom, AVERAGE_TIME_IN_ROOM_STD) |
				ValueResourceHelper.setIfNew(configPattern.currentPosition, "outside") |
				ValueResourceHelper.setIfNew(configPattern.currentProgram, "Random") |
				ValueResourceHelper.setIfNew(configPattern.programStep, "n/a") |
				ValueResourceHelper.setIfNew(configPattern.currentProgramStepStartTime, -1) |
				ValueResourceHelper.setIfNew(configPattern.probabilityOutsideBuilding, 0.5f)) {
			finalActivate = true;
		}
		if(finalActivate) {
			configPattern.model.activate(true);
		}

		SimulatedUser logic = new SimulatedUser(appManager, this, configPattern,
				roomSimService, this, addRequests);
		simulatedObjects.put(targetPattern.model.getLocation(), logic);
	}
	
	@Override
	protected void removeSimulation(UserSimPattern targetPattern, UserSimConfigPattern configPattern) {
		simulatedObjects.remove(targetPattern.model.getLocation());
	}

	//@Override
	//protected RoomInsideLogicBase<?> getSimulatedObjects(String simLocation) {
	//	return simulatedRooms.get(simLocation);
	//}
}
