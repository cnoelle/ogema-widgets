/**
 * ﻿Copyright 2014-2018 Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copyright 2009 - 2016
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IWES
 *
 * All Rights reserved
 */
/**
 * Copyright 2009 - 2014
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IIS Fraunhofer ISE Fraunhofer IWES
 *
 * All Rights reserved
 */
package de.iwes.elsim.battery;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ogema.core.application.ApplicationManager;
import org.ogema.core.application.Timer;
import org.ogema.core.model.Resource;
import org.ogema.model.devices.storage.ElectricityStorage;
import org.ogema.tools.simulation.service.api.model.SimulatedQuantity;
import org.ogema.tools.simulation.service.api.model.SimulationConfiguration;
import org.ogema.tools.simulation.service.apiplus.SimulationBase;

import de.iwes.elsim.battery.logic.CapacityConfig;
import de.iwes.elsim.battery.logic.EnergyState;
import de.iwes.elsim.battery.logic.GeneratedPowerValue;
import de.iwes.elsim.battery.logic.RatedPowerConfig;
import de.iwes.elsim.battery.logic.SOCConfig;
import de.iwes.elsim.battery.logic.SimulatedBattery;
import de.iwes.util.resource.ValueResourceHelper;

/**
 * A simulation provider, that simulates e.g. a particular sort of devices. 
 * In this example, a the power generated by a PV plant is simulated.  
 */
public class BatterySimulation extends SimulationBase<BatterySimConfigPattern, BatteryPattern> {
	
	private static final long SIM_UPDATE_INTERVAL = 4000;
	
	@Override
	protected long getDefaultUpdateInterval(){return SIM_UPDATE_INTERVAL;}

	// callbacks are guaranteed to come in the same thread, no need to synchronize on the map
	private final Map<String, SimulatedBattery> simulatedObjects = new HashMap<>();
	
	public BatterySimulation(ApplicationManager am) {
		super(am, BatteryPattern.class, true, BatterySimConfigPattern.class);
	}	

	@Override
	public String getProviderId() {
		return "Battery simulation";
	}
	
	@Override
	public Class<? extends Resource> getSimulatedType() {
		return ElectricityStorage.class;
	}

	@Override
	public void buildConfigurations(BatteryPattern pattern, List<SimulationConfiguration> cfgs, BatterySimConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		SOCConfig soc = new SOCConfig(pattern.soc);
		cfgs.add(soc);
		CapacityConfig cap = new CapacityConfig(pattern.maxE);
		cfgs.add(cap);
		RatedPowerConfig ratpow = new RatedPowerConfig(pattern.powerRange);
		cfgs.add(ratpow);
	}
	
	@Override
	public void buildQuantities(BatteryPattern pattern, List<SimulatedQuantity> quantities, BatterySimConfigPattern simPattern) {
		EnergyState energy = new EnergyState(pattern);
		quantities.add(energy);
		GeneratedPowerValue powerValue = new GeneratedPowerValue(pattern);
		quantities.add(powerValue);
	}
	
	@Override
	public String getDescription() {
		return "Simulated battery allowing to set power, simulating SOC";
	}
	
	/** 
	 * Perform the actual simulation here. The targetPattern points to the simulated resource (typically a device). 
	 * The configPattern points to the simulation configuration resource indicating the 
	 * simulation time interval etc.
	 * @param timeStep time since last simulation step in milliseconds
	 */
	@Override
	public void simTimerElapsed(BatteryPattern targetPattern, BatterySimConfigPattern configPattern, Timer t, long timeStep) {
		SimulatedBattery logic = simulatedObjects.get(targetPattern.model.getLocation());
		logic.updateState(timeStep);
	}

	
	@Override
	protected void initSimulation(BatteryPattern targetPattern, BatterySimConfigPattern configPattern) {
		// initialize and activate also the optional fields in targetPattern
		
		//init battery simulation
		boolean doActivate = false;
		if(configPattern.flavorConfiguration.isActive() && configPattern.flavorConfiguration.getValue().equals("pvnetz")) {
			if(		ValueResourceHelper.setIfNewOrZero(targetPattern.minPowerPUN, -SimulatedBattery.MAX_POWER) |
					ValueResourceHelper.setIfNewOrZero(targetPattern.maxPowerPUN, SimulatedBattery.MAX_POWER) |
					ValueResourceHelper.setIfNew(targetPattern.stateControlPVNetz, 0.0f)) {
				doActivate = true;
			}
			targetPattern.minPower = targetPattern.minPowerPUN;
			targetPattern.maxPower = targetPattern.maxPowerPUN;
		} else if(	ValueResourceHelper.setIfNewOrZero(targetPattern.minPower, -SimulatedBattery.MAX_POWER) |
					ValueResourceHelper.setIfNewOrZero(targetPattern.maxPower, SimulatedBattery.MAX_POWER) |
					ValueResourceHelper.setIfNew(targetPattern.stateFeedback, 0.f) |
					ValueResourceHelper.setIfNew(targetPattern.stateControl, 0.f)) {
			doActivate = false;
		}
		if(ValueResourceHelper.setIfNewOrZero(targetPattern.soc, 0.5f) |
				ValueResourceHelper.setIfNew(targetPattern.minE, 0.0f) |
				ValueResourceHelper.setIfNewOrZero(targetPattern.maxE, SimulatedBattery.CAPACITY_KWH*SimulatedBattery.KWH_TO_J) |
				ValueResourceHelper.setIfNew(targetPattern.powerReading, 0.f)) {
			doActivate = true;
		}
		if(doActivate) {
			targetPattern.model.activate(true);
		}		
		
		SimulatedBattery logic = new SimulatedBattery(appManager, targetPattern);
		simulatedObjects.put(targetPattern.model.getLocation(), logic);
	}
	
	@Override
	protected void removeSimulation(BatteryPattern targetPattern, BatterySimConfigPattern configPattern) {
		SimulatedBattery logic = simulatedObjects.remove(targetPattern.model.getLocation());
		logic.close();
	}
}
