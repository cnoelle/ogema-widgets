/**
 * ﻿Copyright 2014-2018 Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copyright 2009 - 2016
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IWES
 *
 * All Rights reserved
 */
/**
 * Copyright 2009 - 2014
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IIS Fraunhofer ISE Fraunhofer IWES
 *
 * All Rights reserved
 */
package de.iwes.elsim.meter.elconbox;

import java.util.List;

import org.ogema.core.application.ApplicationManager;
import org.ogema.core.application.Timer;
import org.ogema.core.model.Resource;
import org.ogema.model.devices.connectiondevices.ElectricityConnectionBox;
import org.ogema.tools.simulation.service.api.model.SimulatedQuantity;
import org.ogema.tools.simulation.service.api.model.SimulationConfiguration;
import org.ogema.tools.simulation.service.apiplus.SimulationBase;

import de.iwes.elsim.meter.bpunit.logic.DataGapConfig;
import de.iwes.elsim.meter.bpunit.logic.ElConPattern;
import de.iwes.elsim.meter.bpunit.logic.GeneratedPowerValue;
import de.iwes.pattern.management2.backup.copy.ResourcePatternManagement;
import de.iwes.util.resource.ValueResourceHelper;

/**
 * A simulation provider, that simulates e.g. a particular sort of devices. 
 * In this example, a the power generated by a PV plant is simulated.  
 */
public class MeterElConBoxSimulation extends SimulationBase<MeterElConBoxSimConfigPattern, MeterElConBoxPattern> {
	
	private static final long SIM_UPDATE_INTERVAL = 4000;
	@Override
	protected long getDefaultUpdateInterval(){return SIM_UPDATE_INTERVAL;}
    public static final float KWH_TO_J = 1000.f * 60.f * 60.f;
    public static final float J_TO_KWH = 1.f/KWH_TO_J;
    
	ResourcePatternManagement<ElConPattern, Object> elCons;

	// callbacks are guaranteed to come in the same thread, no need to synchronize on the map
	//private final Map<String, SimulatedBattery> simulatedObjects = new HashMap<>();
	
	public MeterElConBoxSimulation(ApplicationManager am) {
		super(am, MeterElConBoxPattern.class, true, MeterElConBoxSimConfigPattern.class);
		elCons = new ResourcePatternManagement<ElConPattern, Object>(am, ElConPattern.class, this);
	}	

	@Override
	public String getProviderId() {
		return "Grid connection meter simulation";
	}
	
	@Override
	public Class<? extends Resource> getSimulatedType() {
		return ElectricityConnectionBox.class;
	}
	
	@Override
	public void buildConfigurations(MeterElConBoxPattern pattern, List<SimulationConfiguration> cfgs, MeterElConBoxSimConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		DataGapConfig gap = new DataGapConfig(simPattern.dataInterruption);
		cfgs.add(gap);
	}
	
	@Override
	public void buildQuantities(MeterElConBoxPattern pattern, List<SimulatedQuantity> quantities, MeterElConBoxSimConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		GeneratedPowerValue powerValue = new GeneratedPowerValue(pattern.consumptionPower);
		quantities.add(powerValue);
	}
	
	@Override
	public String getDescription() {
		return "Simulated meter for a building grid connection point";
	}
	
	/** 
	 * Perform the actual simulation here. The targetPattern points to the simulated resource (typically a device). 
	 * The configPattern points to the simulation configuration resource indicating the 
	 * simulation time interval etc.
	 * @param timeStep time since last simulation step in milliseconds
	 */
	@Override
	public void simTimerElapsed(MeterElConBoxPattern targetPattern, MeterElConBoxSimConfigPattern configPattern, Timer t, long timeStep) {
		//SimulatedBattery logic = simulatedObjects.get(targetPattern.model.getLocation());
		//logic.updateState(timeStep);
		if(configPattern.dataInterruption.getValue() > 0) {
			configPattern.dataInterruption.setValue(
					configPattern.dataInterruption.getValue() - timeStep);
		} else {
			float totalPower = 0;
			for(ElConPattern elCon: elCons.getElements()) {
				totalPower += elCon.reading.getValue();
			}
			targetPattern.consumptionPower.setValue(totalPower);
			float energyAdded = totalPower*timeStep*0.001f;
			if(totalPower > 0) {
				targetPattern.consumptionMeter.setValue(targetPattern.consumptionMeter.getValue()+energyAdded);
			} else if((totalPower < 0)){
				targetPattern.generationMeter.setValue(targetPattern.generationMeter.getValue()+energyAdded);
			}
		}

	}

	
	@Override
	protected void initSimulation(MeterElConBoxPattern targetPattern, MeterElConBoxSimConfigPattern configPattern) {
		// initialize and activate also the optional fields in targetPattern
		
		//init battery simulation
		if(ValueResourceHelper.setIfNew(targetPattern.consumptionPower, 0.0f) |
				ValueResourceHelper.setIfNew(targetPattern.consumptionMeter, 0.0f)|
				ValueResourceHelper.setIfNew(targetPattern.generationMeter, 0.0f)) {
			targetPattern.model.activate(true);
		}
		
		//MeterPattern shadowResRef = ShadowResourceHelper.handleShadowingInDriverInit(
		//		this, this, simulatedDevices.getElements(), this, appManager);
		//if(shadowResRef != null) return false; //do not use
		//SimulatedBattery logic = new SimulatedBattery(appManager, targetPattern);
		//simulatedObjects.put(targetPattern.model.getLocation(), logic);
	}
	
	@Override
	protected void removeSimulation(MeterElConBoxPattern targetPattern, MeterElConBoxSimConfigPattern configPattern) {
		//SimulatedBattery logic = simulatedObjects.remove(targetPattern.model.getLocation());
		//logic.close();
	}
}
