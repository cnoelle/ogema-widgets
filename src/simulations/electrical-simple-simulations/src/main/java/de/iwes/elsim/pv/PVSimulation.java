/**
 * ﻿Copyright 2014-2018 Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copyright 2009 - 2016
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IWES
 *
 * All Rights reserved
 */
/**
 * Copyright 2009 - 2014
 *
 * Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IIS Fraunhofer ISE Fraunhofer IWES
 *
 * All Rights reserved
 */
package de.iwes.elsim.pv;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ogema.core.application.ApplicationManager;
import org.ogema.core.application.Timer;
import org.ogema.core.model.Resource;
import org.ogema.core.resourcemanager.ResourceAlreadyExistsException;
import org.ogema.model.devices.generators.PVPlant;
import org.ogema.tools.simulation.service.api.model.SimulatedQuantity;
import org.ogema.tools.simulation.service.api.model.SimulationConfiguration;
import org.ogema.tools.simulation.service.apiplus.SimulationBase;

import de.iwes.elsim.pv.logic.GeneratedPowerValue;
import de.iwes.elsim.pv.logic.RatedPowerConfig;
import de.iwes.util.resource.ValueResourceHelper;
import de.iwes.util.ressim.SimpleResourceValueSimulator;

/**
 * A simulation provider, that simulates e.g. a particular sort of devices. 
 * In this example, a the power generated by a PV plant is simulated.  
 */
public class PVSimulation extends SimulationBase<PVSimConfigPattern, PVPattern> {
	
	private static final long SIM_UPDATE_INTERVAL = 4000;
	@Override
	protected long getDefaultUpdateInterval(){return SIM_UPDATE_INTERVAL;}

	// callbacks are guaranteed to come in the same thread, no need to synchronize on the map
	private final Map<String, SimpleResourceValueSimulator> simulatedObjects = new HashMap<>();
	
	public PVSimulation(ApplicationManager am) {
		super(am, PVPattern.class, true, PVSimConfigPattern.class);
	}	

	@Override
	public String getProviderId() {
		return "PV simulation";
	}
	
	@Override
	public Class<? extends Resource> getSimulatedType() {
		return PVPlant.class;
	}

	@Override
	public void buildConfigurations(PVPattern pattern, List<SimulationConfiguration> cfgs, PVSimConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		RatedPowerConfig ratpow = new RatedPowerConfig(pattern.maxPower);
		cfgs.add(ratpow);
	}
	
	@Override
	public void buildQuantities(PVPattern pattern, List<SimulatedQuantity> quantities, PVSimConfigPattern simPattern) {
		// Add here configuration values that can be edited by the user, see example below
		GeneratedPowerValue powerValue = new GeneratedPowerValue(pattern);
		quantities.add(powerValue);
	}
	
	@Override
	public String getDescription() {
		return "Simulated battery allowing to set power, simulating SOC";
	}
	
	/** 
	 * Perform the actual simulation here. The targetPattern points to the simulated resource (typically a device). 
	 * The configPattern points to the simulation configuration resource indicating the 
	 * simulation time interval etc.
	 * @param timeStep time since last simulation step in milliseconds
	 */
	@Override
	public void simTimerElapsed(PVPattern targetPattern, PVSimConfigPattern configPattern, Timer t, long timeStep) {
		//do nothing here
		//SimulatedBattery logic = simulatedObjects.get(targetPattern.model.getLocation());
		//logic.updateState(timeStep);
	}

	
	@Override
	protected void initSimulation(PVPattern targetPattern, PVSimConfigPattern configPattern) {
		// initialize and activate also the optional fields in targetPattern
		if(ValueResourceHelper.setIfNew(targetPattern.maxPower, 5000) | ValueResourceHelper.setIfNew(targetPattern.powerReading, 0.0f)) {
			resourcePatternAccess.activatePattern(targetPattern);
		}
		
		SimpleResourceValueSimulator logic = new SimpleResourceValueSimulator(targetPattern.powerReading,
				-targetPattern.maxPower.getValue()/2, targetPattern.maxPower.getValue()/2,
				90000, appManager);
		//SimulatedBattery logic = new SimulatedBattery(appManager, targetPattern);
		simulatedObjects.put(targetPattern.model.getLocation(), logic);
	}
	
	@Override
	protected void removeSimulation(PVPattern targetPattern, PVSimConfigPattern configPattern) {
		SimpleResourceValueSimulator logic = simulatedObjects.remove(targetPattern.model.getLocation());
		logic.delete();
	}
}
