/**
 * This file is part of the OGEMA widgets framework.
 *
 * OGEMA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3
 * as published by the Free Software Foundation.
 *
 * OGEMA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OGEMA. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2014 - 2018
 *
 * Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Wissenschaften e.V.
 *
 * Fraunhofer IWES/Fraunhofer IEE
 */
package de.iwes.widgets.reswidget.scheduleviewer.api;

import java.util.Collection;
import java.util.List;

import org.ogema.core.timeseries.ReadOnlyTimeSeries;

public interface ScheduleViewerConfigurationProvider {
	/**The id of the configurationProvider must be provided as parameter
	 * configProvider with URL
	 */
	String getConfigurationProviderId();
	
	/** Get configuration for specific session
	 * 
	 * @param configurationId paramter configurationId provided with URL
	 * @return
	 */
	SessionConfiguration getSessionConfiguration(String configurationId);
	
	/** Current selections/configurations sent to the provider. The provider can
	 * save these configurations fully or partially or just ignore this information. The
	 * message is generated by the ScheduleViewer when a "Save Configuraion" button is pressed.
	 */
	void saveCurrentConfiguration(SelectionConfiguration currentConfiguration, String configurationId);
	
	public interface SessionConfiguration extends SelectionConfiguration {
		/**Provide ScheduleViewerConfiguration. If an element is not set,
		 * the standard values or calculation method is used*/
		ScheduleViewerConfiguration viewerConfiguration();
		
		public enum PreSelectionControllability {
			/** The preselection cannot be changed by the user as long as
			 * the configuration is active (e.g. no datepickers / schedule selector visible)
			 */
			FIXED,
			/** Preselected values may be unselected, but no additional elements
			 * may be selected (e.g. the time range may be changed by the user, but no
			 * time ranges outside the predefined interval may be chosen)
			 */
			MAX_SIZE,
			/** The selection may be changed like with schedule viewer without
			 * configuration
			 */
			FLEXIBLE
		}
		PreSelectionControllability intervalControllability();
		PreSelectionControllability timeSeriesSelectionControllability();
		PreSelectionControllability filterControllability();
		/**If true the standard programs of the ScheduleViewer are not shown if not
		 * given with {@link #viewerConfiguration()}. Otherwise the superset
		 * of both program definitions is used.<br>
		 * If true and no programs are provided then the program selector fields shall
		 * not be displayed
		 */
		boolean overwritePrograms();
		boolean overwriteConditionalFilters();
		boolean overwriteProgramlistFixed();
		
		/**If true all time series found via the filter selected are
		 * preselected, otherwise only the time series given explicitly via
		 * {@link #timeSeriesSelected()} are preselected
		 * @return
		 */
		boolean markTimeSeriesSelectedViaPreselectedFilters();
	}
	
	/** Information on selections made by the user or preselection information*/
	public interface SelectionConfiguration {
		/**Preselected timeseries. The timeseries shall be used initially independently
		 * from preselected filters
		 */
		List<ReadOnlyTimeSeries> timeSeriesSelected();

		/** The programs given here must be part of the respective Collection<TimeSeriesFilter>
		 * provided by {@link #viewerConfiguration()}.setPrograms. These programs will be
		 * preselected.
		 */
		List<Collection<TimeSeriesFilter>> programsPreselected();
		/**Index of outer list to be used
		 * @see ScheduleViewerConfigurationBuilder#setFilters(List)*/
		Integer conditionalTimeSeriesFilterCategoryPreselected();
		List<ConditionalTimeSeriesFilter<?>> filtersPreSelected();
	}
	
}
